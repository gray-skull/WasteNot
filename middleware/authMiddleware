require("dotenv").config()
const jwt = require("jsonwebtoken")

const authMiddleware = (req, res, next) => {
  console.log(">> authMiddleware called <<")
  const authHeader = req.headers["authorization"]
  if (!authHeader) {
    return res.status(400).json({ error: "Unauthorized: No authorization header provided", headers: req.headers })
  }

  if (!authHeader.startsWith("Bearer ")) {
    return res.status(401).json({ error: "Unauthorized: Invalid token format" })
  }

  const token = authHeader.split(" ")[1] // Extract token after "Bearer"
  if (!token) {
    return res.status(401).json({ error: "Unauthorized: Invalid token format" })
  }

  if (!process.env.JWT_SECRET) {
    return res.status(500).json({ error: "Internal server error: JWT secret not defined" })
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET)
    console.log(`>> Decoded token: ${JSON.stringify(decoded)} <<`)
    req.user = decoded
    console.log(`>> User authenticated <<`)
    next()
  } catch (error) {
    return res.status(401).json({ error: "Invalid token" })
  }
}

module.exports = authMiddleware
